#!/usr/bin/env node
'use strict';

const adminLogin = require('../lib/admin-login'),
  CLIConfig = require('../lib/config'),
  constants = require('../lib/const'),
  impersonate = require('../lib/impersonate'),
  login = require('../lib/login'),
  open = require('open'),
  program = require('commander'),
  setupConsoleLoggingHelpers = require('../lib/setup-console-logging-helpers');

setupConsoleLoggingHelpers();

program
  .option('-o, --open', 'Open the browser with the impersonated session')
  .option('-u, --user [value]', 'Define a user (email) to imppersonate')
  .option('-a, --account [value]', 'Define an account (account id) who\'s owner will be imppersonated')
  .option('-e, --env [value]', 'The API environment to use. Defaults to production. Options: dev, staging, prod.')
  .option('-k, --key [value]', 'Path to a secure file where credentials are stored in the format username:password.')
  .parse(process.argv);

try {

  const opts = program.opts();

  if(!opts.account && !opts.user){
    console.error('You need to specify a user or account to use (-a/--account or -u/--user)');
    return false;
  }
  if(!!opts.account && !!opts.user){
    console.error('You cannot specify both a user and an account.');
    return false;
  }
  let config = new CLIConfig(opts);
  config.accountType = constants.ACCT_TYPE_CUSTOMER;

  if (config.ssl) {
    console.info('↓ In ssl mode we use fake local certificates and disable their verification with NODE_TLS_REJECT_UNAUTHORIZED flag. Node v12 and up will throw a warning about this, but you don`t need to worry about that ↓');
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  login(config)
    .then(() => { return adminLogin(config);})
    .then((loggedIn) => {
      if (loggedIn) {
        try {
          const imp = impersonate(config);
          (
            opts.account ?
              imp.getTokensForAccountOwner(opts.account) :
              imp.getTokensForUser(opts.user)
          ).then(tokens => {
            console.log('Access Token: ' + tokens.access_token);
            console.log('Impersonation URL: ' + config.apiLoginUrl + '/impersonate/' + tokens.impersonate_secret);
            if(opts.open){
              open(config.apiLoginUrl + '/impersonate/' + tokens.impersonate_secret);
            }
          });
        } catch (ex) {
          return Promise.reject(ex);
        }
      }

    });

} catch (ex) {

  console.error(ex);
  if (ex.stack) console.error(ex.stack);
  return false;

}
