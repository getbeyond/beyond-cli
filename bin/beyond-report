#!/usr/bin/env node

'use strict';

const CLIConfig = require('../lib/config'),
  login = require('../lib/login'),
  program = require('commander'),
  Report = require('../lib/report/report'),
  Downloader = require('../lib/report/downloader');

program
  .option('-c, --customer', 'Run against a customer account. Defaults to developer.')
  .option('-a, --account [value]', 'Use the given account ID as the default account to load. (Typically used together with the -c and -e options)')
  .option('-i, --imp [value]', 'Use your credentials to impersonate a user')
  .option('-k, --key [value]', 'Path to a secure file where credentials are stored in the format username:password.')
  .option('-e, --env [value]', 'The API environment to use. Defaults to production. Options: dev, staging, prod.')
  .option('-p, --params <value>', 'Custom path to the JSON file with parameters, otherwise looks for the file next to the report')
  .option('--debug', 'Attach node debugger')
  .option('--export <filename>', 'Export result to CSV file')
  .option('--download', 'Get all reports from the platform')
  .option('--checkout-api-url [value]', 'Use to set custom checkout api url, if you don\'t want the default value assigned to current environment.')
  .option('--checkout-client-url [value]', 'Use to set custom checkout client (store) url, if you don\'t want the default value assigned to current environment.')
  .option('--checkout-function-url [value]', 'Use to set custom checkout function api url, if you don\'t want the default value assigned to current environment.')
  .option('--hub-url [value]', 'Use to set custom hub url, if you don\'t want the default value assigned to current environment.')
  .option('--payroll-api-url [value]', 'Use to set custom payroll api url, if you don\'t want the default value assigned to current environment.')
  .parse(process.argv);

try {

  const opts = program.opts();
  const config = new CLIConfig(opts);

  if (config.ssl) {
    console.info('↓ In ssl mode we use fake local certificates and disable their verification with NODE_TLS_REJECT_UNAUTHORIZED flag. Node v12 and up will throw a warning about this, but you don`t need to worry about that ↓');
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  login(config)
    .then((loggedIn) => {

      if (loggedIn) {

        let report;

        if (opts.download) {
          report = new Downloader(config);
        } else {
          report = new Report(config);
        }

        report.run();

      }

    });

} catch (error) {

  handleError(error);
  return false;

}

process.on('unhandledRejection', handleError);

function handleError(error) {
  console.error(error.stack || error);
}
