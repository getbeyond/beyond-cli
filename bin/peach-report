#!/usr/bin/env node

'use strict';

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

let constants     = require('../lib/const');
let login         = require('../lib/login');
let program       = require('commander');
let Report        = require('../lib/report/report');
let Downloader    = require('../lib/report/downloader');

program
  .option('-c, --customer', 'Run against a customer account. Defaults to developer.')
  .option('-a, --account [value]', 'Use the given account ID as the default account to load.')
  .option('-k, --key [value]', 'Path to a secure file where credentials are stored in the format username:password.')
  .option('-t, --token [value]', 'Impersonation token. This takes priority over -k|--key.')
  .option('-e, --env [value]', 'The API environment to use. Defaults to production. Options: dev, staging, prod.')
  .option('-p, --params <value>', 'Custom path to the JSON file with parameters, otherwise looks for the file next to the report')
  .option('--export <filename>', 'Export result to CSV file')
  .option('--download', 'Get all reports from the platform')
  .parse(process.argv);

try {

  let config       = {
    accountId    : (program.account) ? program.account: null,
    accountType  : (program.customer) ? constants.ACCT_TYPE_CUSTOMER : constants.ACCT_TYPE_DEVELOPER,
    apiBaseUrl   : constants.API_PROD_URL,
    env          : (program.env) ? program.env.toUpperCase() : constants.ENV_TYPE_PROD,
  };

  if (config.env === constants.ENV_TYPE_STAGING) {
    config.apiBaseUrl = constants.API_STAGING_URL;
  } else if (config.env === constants.ENV_TYPE_DEV) {
    config.apiBaseUrl = constants.API_DEV_URL;
  }

  login(program, config).then(() => {

    let report;
    
    if (program.download) {
      report = new Downloader(config);
    } else {
      report = new Report(config);
    }

    report.run();

  });

} catch (error) {

  handleError(error);
  return false;

}

process.on('unhandledRejection', handleError);

function handleError(error) {

  console.error(error.stack || error);
  
}
