#!/usr/bin/env node
'use strict';

const CLIConfig = require('../lib/config'),
  login = require('../lib/login'),
  program = require('commander'),
  RunnerProcess = require('../lib/runner-process'),
  setupConsoleLoggingHelpers = require('../lib/setup-console-logging-helpers');

setupConsoleLoggingHelpers();

program
  .option('-c, --customer', 'Run against a customer account. Defaults to developer.')
  .option('-a, --account [value]', 'Use the given account ID as the default account to load. (Typically used together with the -c and -e options)')
  .option('-i, --imp [value]', 'Use your credentials to impersonate a user')
  .option('-k, --key [value]', 'Path to a secure file where credentials are stored in the format username:password.')
  .option('-p, --port [value]', 'Use the given port for the web server.')
  .option('-d, --dev-port [value]', 'Use the given port for the webpack dev server. In not given we will find some automatically.')
  .option('-o, --host [value]', 'Use the given host for the web server.')
  .option('-s, --ssl', 'Runs server using https protocol.')
  .option('-m, --vhost', 'If running in a virtual machine, use this flag to automatically listen on 0.0.0.0 instead of localhost by default.')
  .option('-e, --env [value]', 'The API environment to use. Defaults to production. Options: dev, staging, prod.')
  .option('-v, --verbose', 'Verbose build output.')
  .option('-w, --watch [value]', 'Watch for changes and reload the browser. If any value given (in milliseconds), it will poll for changes each X ms.')
  .option('--checkout-api-url [value]', 'Use to set custom checkout api url, if you don\'t want the default value assigned to current environment.')
  .option('--checkout-client-url [value]', 'Use to set custom checkout client (store) url, if you don\'t want the default value assigned to current environment.')
  .option('--checkout-function-url [value]', 'Use to set custom checkout function api url, if you don\'t want the default value assigned to current environment.')
  .option('--dist-dir [value]', 'Custom dist directory path')
  .option('--external-configs [value]', 'The external configs override.')
  .option('--hub-url [value]', 'Use to set custom hub url, if you don\'t want the default value assigned to current environment.')
  .option('--payroll-api-url [value]', 'Use to set custom payroll api url, if you don\'t want the default value assigned to current environment.')
  .option('--preserve-symlinks', 'Preserve symbolic links during build.')
  .option('--segment-key [value]', 'The Segment key to use for tracked events. If not provided, all events will be logged to console.')
  .option('--skip-lint', 'Skips code linting.')
  .option('--skip-login', 'Doesn\'t log in developer/user - so far only useful for web2 development')
  .parse(process.argv);

try {

  const config = new CLIConfig(program.opts());
  const loginPromise = config.skipLogin ?
    Promise.resolve.bind(Promise, true) :
    login.bind(this, config);

  if (config.ssl) {
    console.info('↓ In ssl mode we use fake local certificates and disable their verification with NODE_TLS_REJECT_UNAUTHORIZED flag. Node v12 and up will throw a warning about this, but you don`t need to worry about that ↓');
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  loginPromise()
    .then((loggedIn) => {

      if (loggedIn) {
        try {
          const runnerProcess = new RunnerProcess(config);
          runnerProcess.start();
        } catch (ex) {
          return Promise.reject(ex);
        }
      }

    });

} catch (ex) {

  console.error(ex);
  if (ex.stack) console.error(ex.stack);
  return false;

}
