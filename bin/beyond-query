#!/usr/bin/env node
'use strict';

let _                          = require('lodash');
let CLIConfig                  = require('../lib/config');
let login                      = require('../lib/login');
let program                    = require('commander');
let Query                      = require('../lib/query/query');
let setupConsoleLoggingHelpers = require('../lib/setup-console-logging-helpers');

setupConsoleLoggingHelpers();

program
  .option('-c, --customer', 'Run against a customer account. Defaults to developer.')
  .option('-a, --account <value>', 'Use the given account ID as the default account to load. (Typically used together with the -c and -e options)')
  .option('-i, --imp [value]', 'Use your credentials to impersonate a user')
  .option('-k, --key <value>', 'Path to a secure file where credentials are stored in the format username:password.')
  .option('-e, --env <value>', 'The API environment to use. Defaults to production. Options: dev, staging, prod')
  .option('-u, --url <url>', 'Sets full relative uri, e.g. /ping')
  .option('-m, --method <method>', 'The request method, defaults to GET. Options: post, put, delete', /^post|put|delete$/i, 'get')
  .option('-j, --json <filename>', 'JSON file with query params')
  .option('--export <filename>', 'Exports result to CSV file')
  .option('--find <find>', 'Examples: id=[1,2] | \'id >= 10\' | field1=\'string 1\',field2=\'string 2\'')
  // .option('--findIncludes <find>', '')
  // .option('--includes <includes>', '')
  .option('--fields <fields>', 'The list returned fields, separated by comma')
  .option('--sort <sort>', 'See: https://github.com/peachworks/Peach-API/wiki/Queries,-Sorting,-Pagination#sort')
  .option('--limit <sort>', 'Limit, must be a number', /^\d+$/, 100)
  .option('--page <sort>', 'Pagination, must be a number', /^\d+$/, 0)
  .parse(process.argv);

try {

  let config = new CLIConfig(program);

  if (config.ssl) {
    console.info('↓ In ssl mode we use fake local certificates and disable their verification with NODE_TLS_REJECT_UNAUTHORIZED flag. Node v12 and up will throw a warning about this, but you don`t need to worry about that ↓');
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }

  login(config)
    .then((loggedIn) => {

      if (loggedIn) {
        try {
          let query = new Query(config);
          query.run();
        } catch (ex) {
          return Promise.reject(ex);
        }
      }

    });

} catch (ex) {

  handleError(error);
  return false;

}

process.on('unhandledRejection', handleError);

function handleError(error) {

  console.error(error.stack || error);

}
